<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steve Robinson]]></title>
  <link href="http://steverobinson.in/atom.xml" rel="self"/>
  <link href="http://steverobinson.in/"/>
  <updated>2015-04-12T23:26:34+05:30</updated>
  <id>http://steverobinson.in/</id>
  <author>
    <name><![CDATA[Steve Robinson]]></name>
    <email><![CDATA[steve.rob@me.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mounting an S3 Bucket Using FUSE]]></title>
    <link href="http://steverobinson.in/blog/2015/03/29/mounting-an-s3-bucket/"/>
    <updated>2015-03-29T16:52:23+05:30</updated>
    <id>http://steverobinson.in/blog/2015/03/29/mounting-an-s3-bucket</id>
    <content type="html"><![CDATA[<p>Have you ever wanted to interact with your Amazon S3 bucket just like how you deal with the directories in the file system without having to mess around with an API? I recently came across a really cool tool that allows you to do just that. The technology that this tool uses, like some of you might have guessed, is FUSE (Filesystems in User Space).</p>

<!--more-->


<p>So what is FUSE? I&rsquo;ve heard about it before and I had even used it blindly in college in our FOSS lab but never had a concrete understanding. While I was trying to learn about it, I came across <a href="http://www.cs.nmsu.edu/~pfeiffer/fuse-tutorial/">this page</a> which puts FUSE in plain terms and I am quoting from it -</p>

<blockquote><p>One of the real contributions of Unix has been the view that &ldquo;everything is a file&rdquo;. A tremendous number of radically different sorts of objects, from data storage to file format conversions to internal operating system data structures, have been mapped to the file abstraction. One of the more recent directions this view has taken has been Filesystems in User Space, or FUSE (no, the acronym really doesn&rsquo;t work. Oh well). The idea here is that if you can envision your interaction with an object in terms of a directory structure and filesystem operations, you can write a FUSE file system to provide that interaction. You just write code that implements file operations like open(), read(), and write(); when your filesystem is mounted, programs are able to access the data using the standard file operation system calls, which call your code.</p></blockquote>

<p>This simply blew my mind! After learning about FUSE I could imagine how easily something like S3 or heck even a database like MySQL can be treated as a file system using FUSE.</p>

<p>Okay now the software I found is called <a href="https://github.com/s3fs-fuse/s3fs-fuse">s3fs-fuse</a>. It&rsquo;s written in C++ and although I&rsquo;m not a big fan of the language reading through the codebase gave a really good insight on writing a FUSE filesystem.</p>

<p>So here&rsquo;s how you use use s3fs-fuse. Download the project from the <a href="https://github.com/s3fs-fuse/s3fs-fuse">github repo</a> and install it by following the instructions on the <a href="https://github.com/s3fs-fuse/s3fs-fuse/wiki/Installation-Notes">wiki</a>. Now I could not find a binary release so you&rsquo;ll have to build the project on your own. Its not as hard as it sounds.</p>

<p>Once you have it installed, you need to store your AWS credentials in a file at either <code>~/.passwd-s3fs</code> (600 permission) or <code>/etc/passwd-s3fs</code> (640 permission) in the format - <code>accessKeyId:secretAccessKey</code>.</p>

<p>Now we&rsquo;re all set. Let&rsquo;s say we need to mount our S3 bucket - <code>fuse-ftw</code>. To do that we need to run the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/bin/s3fs fuse-ftw /mnt</span></code></pre></td></tr></table></div></figure>


<p>and that is it! s3fs also allows provides few options to control the way the bucket is mounted. Some of the useful ones are:</p>

<ul>
<li><p><strong>default_acl</strong> - lets you set the default <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">canned access control policy</a> for the objects stored in the bucket. The default value for this is <code>private</code>. You can set it to, say, <code>public-read</code> to allow everyone to read but restrict all other operations.</p></li>
<li><p><strong>use_cache</strong> - this is a cool option that lets you tell s3fs to use a local folder to cache the objects (files) so that it can avoid unnecessarily downloading files from S3. It uses MD5 checksums to make sure cache is valid.</p></li>
<li><p><strong>retries</strong> - this sets the number of times that you would like s3fs to retry an operation upon failure.</p></li>
</ul>


<p>Check the wiki for more options and a much more detailed write up on the way this works and its limitations.</p>

<p>And FUSE is totally cool. I mentioned about treating a database as a filesystem earlier right? Well, I found a python library called <a href="https://github.com/clsn/mysqlfuse">mysqlfuse</a> that does just that! Check it out.</p>

<p>Have you used FUSE for doing something interesting? Let me know by dropping a comment below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RackRewindableInput Lock File Not Found]]></title>
    <link href="http://steverobinson.in/blog/2015/03/11/lack-of-diskspace-makes-passenger-throw-rackrewindableinput-not-found/"/>
    <updated>2015-03-11T17:05:41+05:30</updated>
    <id>http://steverobinson.in/blog/2015/03/11/lack-of-diskspace-makes-passenger-throw-rackrewindableinput-not-found</id>
    <content type="html"><![CDATA[<p>We were doing some crazy things with our staging server and it ran out of space which we did not notice because of the lack of monitoring on this instance. When our Q/A tried accessing the server later on the app was inaccessible and was throwing 500s all over.</p>

<p>The exception tracker we are using sent us the stacktrace and the error message was incredibly puzzling - <code>Errno::ENOENT: No such file or directory /tmp/RackRewindableInput20150311-13259-cvqkcr.lock)</code>. I was not sure what to make of this and I had no idea that we had ran out of space.</p>

<!--more-->


<p>Using the stacktrace I figured out that the exception was thrown from a class - <code>RewindableInput</code> in the Passenger project. There was note saying this was a modified version of <code>Rack::RewindableInput</code>. So this is actually a part of the Rack codebase as well.</p>

<p>After doing some research I learned that this RewindableInput class is used to make a the request body <code>rewindable</code> which apparently means that you can bring it back to the original state whenever you want to (if I understand correctly).</p>

<p>The exception was thrown at <a href="https://github.com/phusion/passenger/blob/stable-3.0/lib/phusion_passenger/utils/rewindable_input.rb#L86">this line</a> where a <code>tempfile</code> is being created and since we did not have any space on the disk this could not happen and thus we got the error.</p>

<p>Even then, since the error message was <code>Errno::ENOENT: No such file or directory</code> and me being not aware of how <a href="https://www.omniref.com/ruby/2.2.1/symbols/Tempfile">Tempfile</a> works could not figure out that the reason was the diskspace. Then I ran into a StackOverflow answer where the OP had reported a similar problem with JRuby and the reccomended solution was the check if the <code>/tmp</code> directory is writable and has proper permissions. But the OP later reported that he had actually ran out of space.</p>

<p>Why did I not think of that? Anyway, I then ran <code>df</code> and found out the disk had no space left. I immediately cleared the junk that was created because of the <strong>crazy stuff</strong> I had been doing earlier and everything went back to normal.</p>

<p>So! If you ever come across this exception - <code>Errno::ENOENT: No such file or directory /tmp/RackRewindableInput&lt;timestamp&gt;-&lt;random&gt;.lock)</code> check your disk space first! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.0 Boosts Rails Boot Time]]></title>
    <link href="http://steverobinson.in/blog/2015/01/21/ruby-2-dot-0-boosts-rails-boot-time/"/>
    <updated>2015-01-21T19:23:54+05:30</updated>
    <id>http://steverobinson.in/blog/2015/01/21/ruby-2-dot-0-boosts-rails-boot-time</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working on a codebase which is Rails 4.0 and Ruby 1.9.3 and something that&rsquo;s annoying about this app is its incredibly large load time. It takes about 26 seconds to boot up.</p>

<p><code>bundle exec rake environment  22.22s user 1.14s system 91% cpu 25.632 total</code></p>

<p>Now we&rsquo;re not doing anything fancy during the bootup so I figured it must the gems that we are loading that&rsquo;s taking so much time.
While googling for ways to debug the boot time I came across this really cool gem called <a href="https://github.com/nevir/Bumbler">Bumbler</a> which prints out the load times for each and every gem in your app.</p>

<p>These are some of the gems that were taking lots of time to load.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>367.43  rails
</span><span class='line'>408.94  fuubar
</span><span class='line'>420.56  slim
</span><span class='line'>441.58  pry-rails
</span><span class='line'>488.60  activemerchant
</span><span class='line'>651.05  meta-tags
</span><span class='line'>986.72  axlsx
</span><span class='line'>1231.87  newrelic_rpm
</span><span class='line'>1303.99  geocoder
</span><span class='line'>2749.84  fog
</span><span class='line'>3044.00  carrierwave</span></code></pre></td></tr></table></div></figure>


<p>Its amazing that it takes 3 seconds to load carrierwave.
I double checked my initializers to make sure there&rsquo;s nothing that could slow down the loading and there was none.
So is Ruby&rsquo;s <code>require</code> slow?</p>

<!--more-->


<p>To find out I did some digging and ended up at this <a href="https://bugs.ruby-lang.org/issues/7158">bug report</a> which talks about improvements to Ruby&rsquo;s <code>require</code> method.
It seems when requiring a file Ruby iterates through the <code>$LOAD_PATHS</code> array to see if the file is loaded which is extremely ineffecient if there are many files to load.
The patch made uses a hash to maintain the loaded files so that it can be looked up in O(1) time.
This is explained by Xavier Shay <a href="http://rhnh.net/2011/05/28/speeding-up-rails-startup-time">here</a>.</p>

<p>In addition to this the string objects in the arrays <code>$LOAD_PATHS</code> and <code>$LOADED_FEATURES</code> are also frozen so these can be cached.
Freezing strings makes them immutable. This is well explained in this <a href="http://magazine.rubyist.net/?Ruby200SpecialEn-require">other article</a> by <a href="https://twitter.com/taru">Masaya Tarui</a>, author of the patch.</p>

<p>All this has made Ruby 2.0 require files much faster. I temporarily switched to Ruby 2.2 and take a look at this -
<code>bundle exec rake environment  3.95s user 0.85s system 99% cpu 4.822 total</code>.</p>

<p>Bumbler report:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>102.74  countries
</span><span class='line'>103.72  haml-rails
</span><span class='line'>117.40  devise
</span><span class='line'>122.33  foundation-rails
</span><span class='line'>130.76  newrelic_rpm
</span><span class='line'>132.80  pry-rails
</span><span class='line'>144.39  sass-rails
</span><span class='line'>163.59  activemerchant
</span><span class='line'>169.82  rails
</span><span class='line'>195.35  axlsx
</span><span class='line'>261.47  geocoder
</span><span class='line'>632.77  fog
</span><span class='line'>780.72  carrierwave</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s a whopping 81% improvement over Ruby 1.9.3 in my case. Your mileage may vary. But this is amazing. So as soon as I get the chance I am going to upgrade to Ruby 2.2 :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hosting FreeGeoIP in Your Cloud]]></title>
    <link href="http://steverobinson.in/blog/2014/11/30/your-own-geocoding-service/"/>
    <updated>2014-11-30T21:11:02+05:30</updated>
    <id>http://steverobinson.in/blog/2014/11/30/your-own-geocoding-service</id>
    <content type="html"><![CDATA[<p>In the project I&rsquo;m working on where we sell photos, we had to find out the country of each and every visitor for a certain business purpose. So we have this piece of code in the Rails <code>ApplicationController</code> to do the job.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">set_country_currency</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">session</span><span class="o">[</span><span class="ss">:country</span><span class="o">]</span> <span class="o">||=</span> <span class="n">request</span><span class="o">.</span><span class="n">location</span><span class="o">.</span><span class="n">country</span>
</span><span class='line'>  <span class="k">rescue</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">error</span> <span class="s2">&quot;ip=</span><span class="si">#{</span><span class="n">request</span><span class="o">.</span><span class="n">remote_ip</span><span class="si">}</span><span class="s2"> exception_type=visitor_geocoding_failure&quot;</span>
</span><span class='line'>    <span class="n">session</span><span class="o">[</span><span class="ss">:country</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;United States of America&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>location</code> method called on <code>request</code> is actually provided by this super awesome and popular Geocoding gem called <a href="https://github.com/alexreisner/geocoder">geocoder</a> and it returns the country from which the request originated. It figures this information out using the IP address available in the request object. Okay but how does the geocoder gem finds the country from an IP address? For doing that geocoder actually talks to an external service called <a href="http://freegeoip.net">FreeGeoIP</a> which is a service written in Go-lang. Btw, Geocoder supports many more such geocoding services like the ones provided by Google, MaxMind etc. FreeGeoIP is completely free and has a fairly reasonable rate-limit (10000 requests / hr). We deployed this part to production and it was working fine until I noticed some performance issues within couple of days.</p>

<!--more-->


<p>As most of you might have guessed, making a request to an external service can be a pretty costly affair and can ruin the response times of your app if you are using it in a crucial place like how we use in our app. The worst part is that whenever a new user visits our site for the first time they are forced to go through this process and consequently the inital page load took too long. Below is the breakdown table for our landing page&rsquo;s controller action provided by NewRelic. As you can see this request to freegeoip.net is slowing things down a lot.</p>

<p><img src="http://i.imgur.com/MwAoGBc.png"></p>

<p>The good thing about FreeGeoIP is the fact that its an <a href="https://github.com/fiorix/freegeoip">OpenSource</a> app and can be hosted by anyone anywere. Since our app is on Amazon AWS, a simple fix to this latency issue would be to host FreeGeoIP inside our cloud so that the latency becomes almost negligible. But I never had the urgency to do this as we had other tasks on our plate which I felt were more important and postponed this task to be done at the end of the week.</p>

<p>But then before the week could end disaster struck. I woke up and found a string of emails on my phone alerting me about the error rate being too high on the app. I logged onto Rollbar (a service we use for exception tracking) and found the exception - <code>Errno::ECONNREFUSED: Connection refused - connect(2)</code> thrown everywhere we used the geocoding service. I initially thought that we might have hit the rate limit or something but just to make sure I tried visiting freegeoip.net and found that the site was unreachable. That was it. This was the worst case scenario that could have happened and it happened and I had to take some action.</p>

<p><img src="http://i.imgur.com/stSG9rp.png"></p>

<p>At first I tried switching to MaxMind as a geocoding service but the format in which the results were sent back was different from that received from FreeGeoIP and I would have to make some changes in my app to accomodate this and I did not feel good about that. So the only choice that remained was to host FreeGeoIP on our own in our cloud.</p>

<p>Although this sounds simple, the main problem was that FreeGeoIP is a Go app and I&rsquo;ve never worked with a Go project before. The documentation was also not very helpful (planning to send patch for it). But in the end I managed to find my way through with some help from the steps inside a <a href="http://www.spritle.com/blogs/2013/08/23/docker-for-beginners/">Dockerfile</a> in the repo :)</p>

<p>So here&rsquo;s how you build the FreeGeoIP project (or any Go project).</p>

<h4>1. Install Go</h4>

<p>For Debian based Linux systems installing is pretty straightforward. All you need to do to run these commands,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install python-software-properties  <span class="c"># 12.04</span>
</span><span class='line'><span class="nv">$ </span>sudo add-apt-repository ppa:duh/golang
</span><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get install golang
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://railskey.wordpress.com/2014/05/31/install-gogolang-on-ubuntu/">Pravin Mishra</a> has written a nice blog detailing all this. Also you can find more instructions in the official <a href="http://golang.org/doc/install">Go-lang website</a>.</p>

<p>Once done you need to setup two environment variables. One is <code>GOROOT</code> which points to the Go installation (<code>/usr/lib/go</code>, if you used above commands to install). The other is the <code>GOBIN</code> variable which points to the directory where you want to keep the binary files generated after building your Go projects. (say <code>/usr/bin/g</code>).</p>

<p>Once done type <code>go version</code> on your terminal to confirm the installation.</p>

<h4>2. Setup your workspace</h4>

<p>Go requires your project directory to be setup in a certain way. So lets get that setup.</p>

<p>First lets create a root directory for our Go projects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir ~/go-lang
</span></code></pre></td></tr></table></div></figure>


<p>Now under this directory you need to have this directory called <code>src</code> which will contain the Go source files. It is important that your source files are stored under a directory hierarchy that follows the source control repository URLs of the Go projects.</p>

<p>For instance the FreeGeoIP project&rsquo;s source code needs to be under the directory - <code>~/go-lang/src/github.com/fiorix/freegeoip</code>. This way projects are automatically namespaced. Pretty neat. Let&rsquo;s go ahead and set this up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir -p ~/go-lang/src/github.com/fiorix/freegeoip
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/go-lang/src/github.com/fiorix/freegeoip
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/fiorix/freegeoip.git .
</span></code></pre></td></tr></table></div></figure>


<p>
Now we&rsquo;ve got the workspace setup with the source code of the FreeGeoIP app. Let&rsquo;s build it.</p>

<h4>3. Build the app</h4>

<p>The source code for the web service is under the <code>cmd/freegeoip</code> directory. So navigate into it and run,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go get
</span></code></pre></td></tr></table></div></figure>


<p>This dowloads all the dependent packages. This is something similar to <code>bundle install</code> in Ruby. Now run,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go install
</span></code></pre></td></tr></table></div></figure>


<p>
This builds the Go app and puts the binary file into the <code>GOBIN</code> directory. In our case its <code>/usr/bin/g</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls /usr/bin/g
</span><span class='line'>freegeoip
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>4. Start the server</h4>

<p>To run the app simply navigtate to the <code>/usr/bin/g</code> folder and run</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./freegeoip
</span></code></pre></td></tr></table></div></figure>


<p>This will boot up the freegeoip server which listens by default at port 8080. At first boot it downloads the IP database from MaxMind. Once its done you can start sending requests to it. Try this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -i http://localhost:8080/json/8.8.8.8
</span><span class='line'><span class="o">{</span><span class="s2">&quot;ip&quot;</span>:<span class="s2">&quot;8.8.8.8&quot;</span>,<span class="s2">&quot;country_code&quot;</span>:<span class="s2">&quot;US&quot;</span>,<span class="s2">&quot;country_name&quot;</span>:<span class="s2">&quot;United States&quot;</span>,<span class="s2">&quot;region_code&quot;</span>:<span class="s2">&quot;CA&quot;</span>,<span class="s2">&quot;region_name&quot;</span>:<span class="s2">&quot;California&quot;</span>,<span class="s2">&quot;city&quot;</span>:<span class="s2">&quot;Mountain View&quot;</span>,<span class="s2">&quot;zip_code&quot;</span>:<span class="s2">&quot;&quot;</span>,<span class="s2">&quot;time_zone&quot;</span>:<span class="s2">&quot;America/Los_Angeles&quot;</span>,<span class="s2">&quot;latitude&quot;</span>:37.386,<span class="s2">&quot;longitude&quot;</span>:-122.084,<span class="s2">&quot;metro_code&quot;</span>:807<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This returns the geolocation details of the IP address <code>8.8.8.8</code> in JSON format. Awesome right?</p>

<h4>5. Install as a service</h4>

<p>Now this server is attached to the terminal. Once you terminate the terminal or disconnect SSH the server will be terminated.</p>

<p>Let&rsquo;s install the app as a service in our server using Ubuntu <a href="http://upstart.ubuntu.com/">Upstart</a> so that it can run as a daemon and can be managed easily. I&rsquo;ve never done this kinda thing before but doing this was fairly straightforward. All you have to do is drop a configuration file into the <code>/etc/init</code> directory and BOOM you can do things like <code>start service_name</code>, <code>stop service_name</code>, <code>status service_name</code>, etc to manage the service. Going through Upstart&rsquo;s docs was a pretty good experience and I found this wonderful <a href="http://stackful-dev.com/what-every-developer-needs-to-know-about-ubuntu-upstart.html">article</a> along the way as well. I also found out that Upstart was going to be replaced by something called <code>systemd</code>.</p>

<p>Anyways, the FreeGeoIP project comes with an upstart conf file. But I wanted a little more. I wanted it to print out its PID to a file so that the service can be tracked and monitored (we&rsquo;ll come to the bit about how its done later). So here is the conf file I used.</p>

<figure class='code'><figcaption><span>freegeoip.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>description <span class="s2">&quot;freegeoip web server&quot;</span>
</span><span class='line'>
</span><span class='line'>start on runlevel <span class="o">[</span>2345<span class="o">]</span>
</span><span class='line'>stop on runlevel <span class="o">[</span>!2345<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>script
</span><span class='line'>  <span class="nb">echo</span> <span class="nv">$$</span> &gt; /var/run/freegeoip.pid
</span><span class='line'>  <span class="nb">exec</span> /usr/local/freegeoip -silent
</span><span class='line'>end script
</span><span class='line'>
</span><span class='line'>post-start script
</span><span class='line'>   <span class="nb">echo</span> <span class="s2">&quot;freegeoip started&quot;</span>
</span><span class='line'>end script
</span></code></pre></td></tr></table></div></figure>


<p>I am not gonna explain this thing line by line but its all incredibly easy to understand if you refer the Upstart documentation. Once you got this in place (<code>/etc/init/freegeoip.conf</code>), run the following command to refresh Upstart. People claim this step is not needed but I had to do this several times to get Upstart to recognise the new configuration file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>initctl reload-configuration
</span></code></pre></td></tr></table></div></figure>


<p>If everything is fine, you should see <code>freegeoip</code> in the list given by the command,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>initctl list
</span></code></pre></td></tr></table></div></figure>


<p>Now you can simply do,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>start freegeoip
</span></code></pre></td></tr></table></div></figure>


<p>to startup the service. Try doing <code>status freegeoip</code> to make sure its running. You should also see that the PID of the freegeoip process is found in the <code>/var/run/freegeoip.pid</code> file. At this point everything is setup. You can go ahead and configure the geocoder gem to use this own FreeGeoIP installation for geocoding. But since this is a critical service for our app I wanted to add some safety measures in place.</p>

<h4>6. Configuring with Monit</h4>

<p>We use <a href="http://mmonit.com/monit/">Monit</a> which is an extremely lightweight system monitoring and error recovery tool that can watch the processes or files you want and take actions when certain things happen like restarting your app when it goes down, restarting your processes if they take more memory, etc and also it allows you to setup alerts. Monit also provides a nice web interface using which you can get a glimpse of the processes running in your server. Installing Monit is super easy. Just follow the instructions in the website.</p>

<p>Once you&rsquo;ve got Monit installed, configuring it is pretty simple. Here is a simple configuration we can use for managing the <code>freegeoip</code> process.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>check process freegeoip with pidfile /var/run/freegeoip.pid
</span><span class='line'>  start <span class="nv">program</span> <span class="o">=</span> <span class="s2">&quot;/sbin/start freegeoip&quot;</span>
</span><span class='line'>  stop <span class="nv">program</span> <span class="o">=</span> <span class="s2">&quot;/sbin/stop freegeoip&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Very expressive. Right? We tell monit to keep track of the process with name <code>freegeoip</code> with the PID form the file <code>/var/run/freegeoip.pid</code> (now do you get why I wanted the PID so badly?). We then tell monit how to start and stop the process. By default monit will keep watch and when the process goes down for some reason monit will start it back up again. Thus there would be minimal disruption in service.</p>

<p>Add this configuration into a file <code>monit-freegeoip.conf</code> in the <code>/etc/monit/monit.d</code> directory. By default whatever file you add here will be included in the <code>/etc/monit/monitrc</code> file which is the main configuration file. This happens due to this line at the bottom of the <code>monitrc</code> file - <code>include /etc/monit/monit.d/*.conf</code>.</p>

<p>Restart monit using <code>sudo service monit restart</code> and do <code>monit status</code>. You&rsquo;ll find info about the <code>freegeoip</code> process in the output. It should be something like this -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Process <span class="s1">&#39;freegeoip&#39;</span>
</span><span class='line'>  status                            Running
</span><span class='line'>  monitoring status                 Monitored
</span><span class='line'>  pid                               12155
</span><span class='line'>  parent pid                        1
</span><span class='line'>  uptime                            4d 6h 57m
</span><span class='line'>  children                          0
</span><span class='line'>  memory kilobytes                  7084
</span><span class='line'>  memory kilobytes total            7084
</span><span class='line'>  memory percent                    0.4%
</span><span class='line'>  memory percent total              0.4%
</span><span class='line'>  cpu percent                       0.0%
</span><span class='line'>  cpu percent total                 0.0%
</span><span class='line'>  data collected                    Mon, <span class="m">01</span> Dec <span class="m">2014</span> 07:54:17
</span></code></pre></td></tr></table></div></figure>


<p>Great. Now if freegeoip goes down for some reason, monit will start it right back up again and we can sleep peacefully without any worries :)</p>

<p>Lets do a small recap of what we&rsquo;ve done so far.</p>

<ol>
<li>We installed Go</li>
<li>We built and ran the FreeGeoIP Go project</li>
<li>We installed it as a service using Upstart</li>
<li>We configured Monit to monitor the process</li>
</ol>


<p>Hope this was useful and not boring :)</p>

<p>Back to my problem. Once I got our very own FreeGeoIP service running, all I had to do was configure the Geocoder gem to use this instead of freegeoip.net. Upon consulting the documentation I learned that it was as easy as doing the following in a Rails initializer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Geocoder</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">timeout</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:ip_lookup</span> <span class="o">=&gt;</span> <span class="ss">:freegeoip</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:freegeoip</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:host</span> <span class="o">=&gt;</span> <span class="s2">&quot;myserver.com:8080&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now for the moment of truth. I hooked onto Rails console and typed the following statement - <code>Geocoder.search "8.8.8.8"</code> and what do I get? <code>Errno::ECONNREFUSED: Connection refused - connect(2)</code></p>

<p>Same old error again. I was completely puzzled. I checked monit to see if the service was still up and it was up. I used <code>curl</code> again to hit the freegeoip service and it was working fine. Something somewhere was going horribly wrong. I realized something was up with the geocoder gem and so I opened up the source code on GitHub to see where the <code>:host</code> configuration was being used and try to find out if it was really using the host supplied by me.</p>

<p>This method in the file <a href="https://github.com/alexreisner/geocoder/blob/master/lib/geocoder/lookups/freegeoip.rb#L11"><code>lib/geocoder/lookups/freegeoip.rb</code></a> was responsible for building the query URL and it used this <code>host</code> private method which inturn checked the <code>configuration</code> hash to see if <code>:host</code> was supplied and if so it used it and if not it fellback to <code>freegeoip.net</code>.</p>

<figure class='code'><figcaption><span>freegeoip.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">query_url</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;</span><span class="si">#{</span><span class="n">protocol</span><span class="si">}</span><span class="s2">://</span><span class="si">#{</span><span class="n">host</span><span class="si">}</span><span class="s2">/json/</span><span class="si">#{</span><span class="n">query</span><span class="o">.</span><span class="n">sanitized_text</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">host</span>
</span><span class='line'>  <span class="n">configuration</span><span class="o">[</span><span class="ss">:host</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;freegeoip.net&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>All seems fine. I decided to log this <code>query_url</code> to the console to see what was being built. Now I had to edit the gem&rsquo;s source on my machine. To do this I used <code>bundle open</code> to open up the geocoder source code locally. When I opened up the <code>freegeoip.rb</code> file, what I found was slightly different from what I saw on GitHub. Here&rsquo;s the <code>query_url</code> method that I had on my local development setup.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">query_url</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;</span><span class="si">#{</span><span class="n">protocol</span><span class="si">}</span><span class="s2">://freegeoip.net/json/</span><span class="si">#{</span><span class="n">query</span><span class="o">.</span><span class="n">sanitized_text</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see there was no way to configure the host here. As it turned out I was using an older version of the gem. So I went ahead and did a <code>bundle update geocoder</code> and then ran <code>Geocoder.search "8.8.8.8"</code> and I got,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="c1">#&lt;Geocoder::Result::Google:0x000000062888a8</span>
</span><span class='line'>  <span class="vi">@cache_hit</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>  <span class="vi">@data</span><span class="o">=</span>
</span><span class='line'>   <span class="p">{</span><span class="s2">&quot;address_components&quot;</span><span class="o">=&gt;</span>
</span><span class='line'>     <span class="o">[</span><span class="p">{</span><span class="s2">&quot;long_name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Route 8&quot;</span><span class="p">,</span> <span class="s2">&quot;short_name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;LA-8&quot;</span><span class="p">,</span> <span class="s2">&quot;types&quot;</span><span class="o">=&gt;[</span><span class="s2">&quot;route&quot;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="s2">&quot;long_name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Louisiana&quot;</span><span class="p">,</span> <span class="s2">&quot;short_name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;LA&quot;</span><span class="p">,</span> <span class="s2">&quot;types&quot;</span><span class="o">=&gt;[</span><span class="s2">&quot;administrative_area_level_1&quot;</span><span class="p">,</span> <span class="s2">&quot;political&quot;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="s2">&quot;long_name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;United States&quot;</span><span class="p">,</span> <span class="s2">&quot;short_name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;US&quot;</span><span class="p">,</span> <span class="s2">&quot;types&quot;</span><span class="o">=&gt;[</span><span class="s2">&quot;country&quot;</span><span class="p">,</span> <span class="s2">&quot;political&quot;</span><span class="o">]</span><span class="p">}</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;formatted_address&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Louisiana 8, Louisiana, USA&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;geometry&quot;</span><span class="o">=&gt;</span>
</span><span class='line'>     <span class="p">{</span><span class="s2">&quot;bounds&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;northeast&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;lat&quot;</span><span class="o">=&gt;</span><span class="mi">31</span><span class="o">.</span><span class="mi">8475579</span><span class="p">,</span> <span class="s2">&quot;lng&quot;</span><span class="o">=&gt;-</span><span class="mi">91</span><span class="o">.</span><span class="mi">6569889</span><span class="p">},</span> <span class="s2">&quot;southwest&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;lat&quot;</span><span class="o">=&gt;</span><span class="mi">31</span><span class="o">.</span><span class="mo">0643337</span><span class="p">,</span> <span class="s2">&quot;lng&quot;</span><span class="o">=&gt;-</span><span class="mi">93</span><span class="o">.</span><span class="mi">5195453</span><span class="p">}},</span>
</span><span class='line'>      <span class="s2">&quot;location&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;lat&quot;</span><span class="o">=&gt;</span><span class="mi">31</span><span class="o">.</span><span class="mi">523812</span><span class="p">,</span> <span class="s2">&quot;lng&quot;</span><span class="o">=&gt;-</span><span class="mi">92</span><span class="o">.</span><span class="mi">587424</span><span class="p">},</span>
</span><span class='line'>      <span class="s2">&quot;location_type&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;GEOMETRIC_CENTER&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;viewport&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;northeast&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;lat&quot;</span><span class="o">=&gt;</span><span class="mi">31</span><span class="o">.</span><span class="mi">8475579</span><span class="p">,</span> <span class="s2">&quot;lng&quot;</span><span class="o">=&gt;-</span><span class="mi">91</span><span class="o">.</span><span class="mi">6569889</span><span class="p">},</span> <span class="s2">&quot;southwest&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;lat&quot;</span><span class="o">=&gt;</span><span class="mi">31</span><span class="o">.</span><span class="mo">0643337</span><span class="p">,</span> <span class="s2">&quot;lng&quot;</span><span class="o">=&gt;-</span><span class="mi">93</span><span class="o">.</span><span class="mi">5195453</span><span class="p">}}},</span>
</span><span class='line'>    <span class="s2">&quot;partial_match&quot;</span><span class="o">=&gt;</span><span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;types&quot;</span><span class="o">=&gt;[</span><span class="s2">&quot;route&quot;</span><span class="o">]</span><span class="p">}</span><span class="o">&gt;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Massive relief. Finally!</p>

<p>Deployed all this to production and within some hours we noticed improvements in the response times. And the breakdown table from NewRelic for the same landing page action now shows how much we have improved. The request to the geocoding service is down below in the table.</p>

<p><img src="http://i.imgur.com/ueFn1cz.png?1"></p>

<p>For me this was an extremely good learning experience. I hope this blog was useful and interesting for you as well :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Outsourcing Image Processing]]></title>
    <link href="http://steverobinson.in/blog/2014/10/31/outsourcing-image-processing/"/>
    <updated>2014-10-31T01:06:26+05:30</updated>
    <id>http://steverobinson.in/blog/2014/10/31/outsourcing-image-processing</id>
    <content type="html"><![CDATA[<p>One of our clients at Spritle is a startup that sells photos taken at various events. The Rails app we have built and maintaining for them involves photographers uploading large numbers of photos (each photographer uploads around 500-1000 images per album and we have lots of photographers, albums &amp; events!) at a time and processing these images into three versions of different dimensions. One of these versions also needs a watermark to be placed on it. We had a very basic setup to do all this work but it was not good enough and subsequently we offloaded the heavyligting to a cloud service. But before that let me explain how we were doing things before offloading the processing.</p>

<!--more-->


<p>So when photographers upload photos from the application, the photos are not sent to our server. Instead they are uploaded directly to our S3 bucket and the URL of these photos are continuously posted to our application as each photo completes uploading. Our Rails app upon receiving this URL saves it in the database and queues a job for our <a href="https://github.com/mperham/sidekiq">Sidekiq</a> workers to perform. The Sidekiq job simply passes the S3 URL of our photo to Photo model&rsquo;s <code>remote_resource_url=</code> method which is provided by <a href="https://github.com/carrierwaveuploader/carrierwave">Carrierwave</a>. This method downloads the image from the remote location - S3 in our case, processes it, generating the versions we need, uploads these three versions to S3 again and updates the <code>resource</code> attribute of the photo with the final location of the image on S3. Carrierwave is clever in that it stores only the S3 key of the original version (unprocessed) in the Photo model. Since it names the other versions as <code>&lt;version_name&gt;_image_name</code> it can easily provide us with URLs for other versions if needed.</p>

<p>This setup worked perfectly for us. But the problem was the throughput. Each image took nearly 4 minutes to process which was unacceptable given that we would have photographers uploading thousands of images within couple of hours on some days and then would have to wait for several hours for all their images to be processed. This had a bad impact on sales as our aim is to get the event photos available to the buyers as soon as possible once the events are over. We tried increasing the number of sidekiq workers and that improved the throughput a bit but we could never sustain doing something like that. Sure we could add couple more EC2 instances into the mix and speed things up but economically it was not a desireable path to take for the startup. This is something we are planning to do in the near future and it involves using Elixir on the awesome Erlang VM. But for now we needed a more cost effective and headache free solution.</p>

<p>We took the decision to go with an external service to take care of the image processing work. Within few minutes of research I found two promising services. They were <a href="http://cloudinary.com/">Cloudinary</a> and <a href="http://www.blitline.com/">Blitline</a>. Cloudinary is incredibly sophisticated with lots of features including tons of image manipulation options, enhancements, etc and also provides a CDN for our images. They even provide URL-based manipulations where we can encode the operations to be performed on an image as part of the URL itself and the image is served after the operations are applied. But there is a catch with Cloudinary. Cloudinary provides its own storage and there is no way to tell Cloudinary to store the processed images in our own S3 bucket unless you go with their Advanced plan. There are options to backup images to our S3 and also we could use their API to move images to our bucket. But then this aint a straight forward solution.</p>

<p>Another problem for us was the storage limits Cloudinary had put in place. Even if you take their Advanced plan which costs $200/m you get only 100 GB of storage. For me Blitline sounded much more interesting.</p>

<p>With Blitline all you need to do is make an API call to it telling where to get the original image (available in our S3 bucket), what transformations need to be performed and where the results need to be stored. Blitline will respond after completing these operations with the URLs of the processed images. You can do multiple transformations of the original image and Blitline will respond with URLs for all those versions. For us Blitline&rsquo;s flexible API and the pricing model which is based on the hours of processing used were a big win.</p>

<p>Let&rsquo;s look at a basic example of a job submitted to Blitline. This one is from their API docs:</p>

<figure class='code'><figcaption><span>basic_job.ruby </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;application_id&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;YOUR_APP_ID&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;src&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;http://www.google.com/logos/2011/yokoyama11-hp.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;functions&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;blur&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;save&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s2">&quot;image_identifier&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;MY_CLIENT_ID&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The response to this simple job is this:</p>

<figure class='code'><figcaption><span>response.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;results&quot;</span><span class="p">:</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;images&quot;</span><span class="p">:[{</span>
</span><span class='line'>                 <span class="nt">&quot;image_identifier&quot;</span><span class="p">:</span> <span class="s2">&quot;MY_CLIENT_ID&quot;</span><span class="p">,</span>
</span><span class='line'>                 <span class="nt">&quot;s3_url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://dev.blitline.s3.amazonaws.com/2011111513/1/fDIFJQVNlO6IeDZwXlruYg.jpg&quot;</span>
</span><span class='line'>             <span class="p">}],</span>
</span><span class='line'>    <span class="nt">&quot;job_id&quot;</span><span class="p">:</span> <span class="s2">&quot;4ec2e057c29aba53a5000001&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is a slightly more complex job where we tell Blitline where to find our original image and after resizing, where to store it:</p>

<figure class='code'><figcaption><span>s3_example.ruby </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;application_id&quot;</span><span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;BLITLINE_APP_ID&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;src&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;original_photo_url&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;functions&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;resize_to_fit&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;params&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;height&quot;</span><span class="o">=&gt;</span><span class="mi">400</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;save&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;image_identifier&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;large&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;s3_destination&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;bucket&quot;</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;S3_BUCKET&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;key&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;key_for_object&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;headers&quot;</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;x-amz-grant-read&quot;</span> <span class="o">=&gt;</span><span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;x-amz-meta-foo&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;authenticated-read&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The response to this is also similar to the previous one but it differs in the fact that now the resultant image will be in our S3 bucket.</p>

<p>One of the nicer features of Blitline is how it allows us to nest functions so that the resultant image of the parent is used for processing the nested functions. Here is a job demonstrating just that. Infact this is the job we are performing for our service.</p>

<figure class='code'><figcaption><span>nested_functions.ruby </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;application_id&quot;</span><span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;BLITLINE_APP_ID&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;src&quot;</span> <span class="o">=&gt;</span> <span class="vi">@photo</span><span class="o">.</span><span class="n">original_resource_url</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;pre_process&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;move_original&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;s3_destination&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;bucket&quot;</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;S3_BUCKET&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;key&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;key_for_object&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;headers&quot;</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;x-amz-grant-read&quot;</span> <span class="o">=&gt;</span><span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;x-amz-meta-foo&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;authenticated-read&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;functions&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;resize_to_fit&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;params&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;height&quot;</span><span class="o">=&gt;</span><span class="mi">400</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;save&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;image_identifier&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;large&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;s3_destination&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;bucket&quot;</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;S3_BUCKET&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;key&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;key_for_object&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;headers&quot;</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;x-amz-grant-read&quot;</span> <span class="o">=&gt;</span><span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;x-amz-meta-foo&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;authenticated-read&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;functions&quot;</span> <span class="o">=&gt;[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;resize_to_fit&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;params&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;height&quot;</span><span class="o">=&gt;</span><span class="mi">120</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="s2">&quot;save&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;image_identifier&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;small&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;s3_destination&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;bucket&quot;</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;S3_BUCKET&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;key&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;key_for_object&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;headers&quot;</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;x-amz-grant-read&quot;</span> <span class="o">=&gt;</span><span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;x-amz-meta-foo&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;authenticated-read&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;resize_to_fit&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;params&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;height&quot;</span><span class="o">=&gt;</span><span class="mi">300</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="s2">&quot;functions&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;composite&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;params&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;src&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;url_of_watermark_image&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;gravity&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;CenterGravity&quot;</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="s2">&quot;save&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;image_identifier&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;social&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;s3_destination&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;bucket&quot;</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;S3_BUCKET&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;key&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;key_for_object&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span><span class="o">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above job we have this key called <em>pre_process</em>. This allows us to specify the transformations that need to be performed on the original source image. Here we just instruct it to move it to our S3 bucket. Followed by that we have a function that generates a small version of the original (400px high) and stores it in our bucket. Within this function we nest two more functions. One of them generates a much smaller version and the other generates an image with height of 300px and a watermark on it. These are stored in our S3 bucket as well.</p>

<p>Super easy and flexible right? :) Blitline provides tons more of manipulation options and other features. Also they provide post-back feature whereby we need not keep polling them to see if the job is complete. Instead they will call us at the specified end point once processing is done! Just have a look at their website to find out more. Although their documentation is not as good as Cloudinary&rsquo;s, I thought it was quite adequate. Their support was also super responsive when I contacted them with issues. They also claim to be cash-positive since 2011 in their website which is also a very good and important thing.</p>

<p>Anyway, coming back to our project, after integrating Blitline with our Rails application the throughput which was at around 12.5 images / min rose to over 100 images / min. :) This inturn meant that the images take in events were made available for purchasing with a very short while and which in turn means our client is happy and making profit! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Foundation's Validation &amp; My Pull Request]]></title>
    <link href="http://steverobinson.in/blog/2014/09/23/on-foundations-validation-and-my-pull-request/"/>
    <updated>2014-09-23T02:51:42+05:30</updated>
    <id>http://steverobinson.in/blog/2014/09/23/on-foundations-validation-and-my-pull-request</id>
    <content type="html"><![CDATA[<p>We widely use the amazing <a href="http://foundation.zurb.com/">Zurb Foundation</a> framework as a base for many of our projects at work. Foundation provides a lot of features and utilities out of the box. One such useful feature is the JavaScript form validation library which they call <a href="http://foundation.zurb.com/docs/components/abide.html">Abide</a>.</p>

<p>Abide is powerful and also flexible. There are a lot of configuration options and it even allows us to easily add custom validations in addition to the ones it provides out of the box. Foundation Abide was working out fine for us until recently when a client of ours asked for a change in the way validation works in the app we do for them.</p>

<!--more-->


<p>By default Abide performs validation whenever the <em>change</em> or <em>blur</em> events (and <em>keyup</em> if <em>live_validation</em> is enabled) are fired. Our client wanted to disable this and wanted validation to happen only upon form submit. That sounded simple since I assumed there should be an option to turn it off. But when I checked the documentation to find the right option I found that there was none to disable validation on blur or change.</p>

<p>So then as always I did a Google search to see if other people have figured this one out and sure enough <a href="http://foundation.zurb.com/forum/posts/1543-disable-abide-form-validation-on-blur-the-fields">someone else had asked</a> for the same thing on the Foundation forums. But the solution given was a simple hack to override foundations blur and change event callbacks with our own which does nothing.</p>

<figure class='code'><figcaption><span>validate_on_blur.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input, textarea, select&#39;</span><span class="p">)</span>
</span><span class='line'> <span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;.abide&#39;</span><span class="p">)</span>
</span><span class='line'> <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;blur.fndtn.abide change.fndtn.abide&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// do nothing</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that worked perfectly and we shipped the changes making our client and satisfied. But I was not so happy since, as you might think, this is not the right way to do this and it felt kinda dirty to solve it this way. And so I began looking into the <a href="https://github.com/zurb/foundation/blob/master/js/foundation/foundation.abide.js">Abide library&rsquo;s code</a> in the Foundation GitHub repository hoping to find some undocumented way to get this done but found none.</p>

<p>It&rsquo;s been a really long while since I last contributed something to an open source project and so I thought why not implement this feature myself and send a pull request to Foundation. That would make me happy since I love contributing and it would also help me make my project better! Just to find out what the maintainers thought about this I opened an <a href="https://github.com/zurb/foundation/issues/5760">issue</a> and they were happy with the new feature and asked for the code.</p>

<p>Coding this feature was pretty straightforward since I just had follow the existing patterns in the library to add this new option which I named &lsquo;validate_on_blur&rsquo;. Once I implemented the feature I updated the docs so this new option is reflected there and ran the Jasmine tests with Karma to make sure nothing broke. I then kinda felt compelled to write a spec for the new option and so I wrote a spec and made sure it passed.</p>

<p>I&rsquo;ve sent a <a href="https://github.com/zurb/foundation/pull/5774">pull request</a> on GitHub with this code and I&rsquo;m waiting for the maintainers to merge it in. I will update this post once I get a response. I strongly feel this is one of the best ways for people to contribute to their favorite open source projects and I am happy to have been able to make this contribution. Thanks to our client who requested this feature in the first place ;)</p>

<p>Update - 31 Oct. 2014:</p>

<p>My pull request has been merged and the guys at Foundation have promised to send me Yeti stickers! :) And my colleagues at Spritle surprised me with a new initiative where if any of our Open Source PRs get merged the company will get everyone ice cream on that day and today I became the &ldquo;Ice create <em>contributor</em> of the day&rdquo; :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Fresh Start]]></title>
    <link href="http://steverobinson.in/blog/2014/08/10/a-fresh-start/"/>
    <updated>2014-08-10T11:04:08+05:30</updated>
    <id>http://steverobinson.in/blog/2014/08/10/a-fresh-start</id>
    <content type="html"><![CDATA[<p>Its my birthday and I&rsquo;m turning 23 today. I&rsquo;ve been meaning to start a new blog (old one <a href="http://footyntech.wordpress.com">here</a>) for a while now and I&rsquo;ve finally taken that step today. I love blogging and I encourage people around me to do it but then for several months, interestingly right after I feel in love with Ruby and Rails I&rsquo;ve stopped writing completely. I do not know why that happened but it just happened. I wrote these <em>come back posts</em> whenever I felt inspired to write something and I promised I would resume blogging but I never did. And I really don&rsquo;t know if this new blog would be any different. But I hope it is.</p>

<p>Alright why am I starting a new blog? Well, I don&rsquo;t have a proper reason for that. Its like I just don&rsquo;t feel like writing anymore over there in my old blog. Whenever I go through the old stuff I wrote, for some reason, I feel it just does not reflect who I am now. Maybe it did when I wrote them but now I think I&rsquo;ve changed a lot. So I want to start afresh with this new blog.</p>

<p>I&rsquo;m Steve Robinson and I work as a technical consultant at <a href="http://sprite.com">Spritle Software</a>. I write code for a living and I write code as a hobby. Apart from software I&rsquo;m interested in football (not hand-egg), humanitarian causes, politics, aviation and computer science. I have a pet GSD and his name is <a href="http://instagram.com/p/ifq033MjsP">Jim</a> and like most programmers I know, I absolutely love coffee! I&rsquo;m a Protestant Christian and I live in a medium sized dusty town called Avadi near Chennai. This is my life :)</p>

<p>Oh and this blog is statically generated using <a href="http://octopress.org/">Octopress</a>.</p>
]]></content>
  </entry>
  
</feed>
